{"version":3,"sources":["Model.ts","LevelComp.tsx","GolfApp.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ExampleResult","validator","ajv","example","datum","result","None","levelFromExamples","examples","accept","reject","shouldAccept","map","shouldReject","error","setResult","assoc","setResultToBad","Bad","updateExample","schemaObject","shouldPass","valid","validate","Good","e","updateLevel","newSchemaText","level","json5","parse","updateWithSchema","curry","changeLevel","newLevelIndex","model","DataExampleComp","text","style","color","exampleColor","exampleToProps","JSON","stringify","LevelComp","onApplySchema","useState","schemaText","setSchemaText","textArea","value","onChange","target","rows","cols","type","onClick","ex","index","key","GolfApp","onChangeLevel","levels","currentLevel","isEmpty","levelButtons","defaultModel","a","App","setModel","oldModel","levelIndex","over","lensProp","adjust","applySchema","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.42a88d1e.chunk.js","sourcesContent":["import ajv from 'ajv'\nimport json5 from 'json5'\nimport {adjust, assoc, curry, lensProp, over} from \"ramda\";\n\nconst validator: ajv.Ajv = ajv()\n\nexport interface Level {\n    readonly error: string | null\n    readonly shouldAccept: ReadonlyArray<Example>\n    readonly shouldReject: ReadonlyArray<Example>\n}\n\nexport enum ExampleResult {\n    Good,\n    Bad,\n    None\n}\n\nexport interface Example {\n    datum: any,\n    result: ExampleResult\n}\n\nexport interface AppModel {\n    readonly levels: ReadonlyArray<Level>\n    readonly currentLevel: number\n}\n\nexport function example(datum: any): Example {\n    return {datum, result: ExampleResult.None}\n}\n\nfunction levelFromExamples(examples: [any[], any[]]): Level {\n    const [accept, reject] = examples\n    return {\n        shouldAccept: accept.map(example),\n        shouldReject: reject.map(example),\n        error: null\n    }\n}\n\nexport function appFromExamples(examples: ReadonlyArray<[any[], any[]]>): AppModel {\n    return {\n        levels: examples.map(levelFromExamples),\n        currentLevel: 0\n    }\n}\n\nconst setResult: (result: ExampleResult) => (example: Example) => Example = assoc('result')\nconst setResultToBad: (ex: Example) => Example = setResult(ExampleResult.Bad)\n\nfunction updateExample(schemaObject: any, shouldPass: boolean, example: Example): Example {\n    try {\n        const valid = validator.validate(schemaObject, example.datum)\n        const correct = shouldPass ? valid : !valid\n        const result = correct ? ExampleResult.Good : ExampleResult.Bad\n        return setResult(result)(example)\n    } catch (e) {\n        return setResultToBad(example)\n    }\n}\n\nfunction updateLevel(newSchemaText: string, level: Level): Level {\n    try {\n        const schemaObject = json5.parse(newSchemaText)\n        const updateWithSchema = curry(updateExample)(schemaObject)\n        return {\n            error: null,\n            shouldAccept: level.shouldAccept.map(updateWithSchema(true)),\n            shouldReject: level.shouldReject.map(updateWithSchema(false))\n        }\n    } catch (e) {\n        return {\n            error: 'Cannot parse json5',\n            shouldAccept: level.shouldAccept.map(setResultToBad),\n            shouldReject: level.shouldReject.map(setResultToBad)\n        }\n    }\n}\n\nexport function applySchema(model: AppModel, newSchemaText: string, levelIndex: number): AppModel {\n    return over(\n        lensProp('levels'),\n        adjust(levelIndex, curry(updateLevel)(newSchemaText)),\n        model\n    )\n}\n\nexport function changeLevel(newLevelIndex: number, model: AppModel): AppModel {\n    return assoc('currentLevel', newLevelIndex, model)\n}\n","import React, {useState} from 'react';\nimport {Example, ExampleResult, Level} from \"./Model\";\n\nexport interface LevelProps {\n    readonly level: Level\n    onApplySchema(schemaText: string): void\n}\n\ninterface DataExampleProps {\n    readonly text: string\n    readonly result: ExampleResult\n}\n\nconst DataExampleComp: React.FunctionComponent<DataExampleProps> = ({text, result}) => {\n    const style = {\n        color: exampleColor(result)\n    }\n    return <div style={style}>{text}</div>\n}\n\nfunction exampleToProps({datum, result}: Example): DataExampleProps {\n    return {\n        text: JSON.stringify(datum, null, 4),\n        result\n    }\n}\n\nexport const LevelComp: React.FunctionComponent<LevelProps> = ({level, onApplySchema}) => {\n    const [schemaText, setSchemaText] = useState<string>('{}')\n    const error = level.error === null ? null : (\n        <h3 style={{color: 'red'}}>{level.error}</h3>\n    )\n    const textArea = <textarea value={schemaText} onChange={e => setSchemaText(e.target.value)} rows={20} cols={65} />\n\n    return (\n        <div>\n            {error}\n            {textArea}\n            <button type=\"button\" onClick={() => onApplySchema(schemaText)}>Try it out!</button>\n            <div>\n                <h4>Should Accept</h4>\n                {level.shouldAccept.map((ex, index) => {\n                    const {text, result} = exampleToProps(ex)\n                    return <DataExampleComp key={`${index}`} text={text} result={result}/>\n                })}\n            </div>\n            <div>\n                <h4>Should Reject</h4>\n                {level.shouldReject.map((ex, index) => {\n                    const {text, result} = exampleToProps(ex)\n                    return <DataExampleComp key={`${index}`} text={text} result={result}/>\n                })}\n            </div>\n        </div>\n    )\n}\n\nfunction exampleColor(result: ExampleResult): string {\n    if (result === ExampleResult.Good) {\n        return 'green'\n    }\n    if (result === ExampleResult.Bad) {\n        return 'red'\n    }\n    return 'black'\n}\n","import React from 'react';\nimport {isEmpty} from 'ramda'\nimport {AppModel} from \"./Model\";\nimport {LevelComp} from \"./LevelComp\";\n\nexport interface GoldAppProps {\n    readonly model: AppModel\n    onChangeLevel(index: number): void\n    onApplySchema(newSchemaText: string): void\n}\n\nexport const GolfApp: React.FunctionComponent<GoldAppProps> = ({model, onChangeLevel, onApplySchema}) => {\n    const {levels, currentLevel} = model\n    if (isEmpty(levels)) {\n        return (\n            <div>\n                Empty game. No levels :(\n            </div>\n        )\n    }\n\n    const levelButtons = levels.map((level, index) => {\n        const text = `Level ${index + 1}`\n        return <button type=\"button\" key={text} onClick={() => onChangeLevel(index)}>{text}</button>\n    })\n\n    return (\n        <div>\n            {levelButtons}\n            <LevelComp level={levels[currentLevel]} onApplySchema={onApplySchema} />\n        </div>\n    )\n}\n","import React, {useState} from 'react';\nimport './App.css';\n\nimport {GolfApp} from \"./GolfApp\";\nimport {appFromExamples, applySchema, AppModel, changeLevel} from \"./Model\";\nimport {curry} from \"ramda\";\n\nconst defaultModel = appFromExamples([\n  [\n    ['some string', 'some other string'],\n    [5, {a: 4}]\n  ],\n  [\n    [5, 10],\n    ['5', {a: 4}]\n  ],\n  [[], []]\n])\n\nfunction App() {\n  const [model, setModel] = useState<AppModel>(defaultModel)\n  const levelChange = (index: number) => setModel(curry(changeLevel)(index))\n  const onApplySchema = (newSchemaText: string) => {\n    setModel(oldModel => applySchema(oldModel, newSchemaText, oldModel.currentLevel))\n  }\n\n  return <GolfApp model={model} onApplySchema={onApplySchema} onChangeLevel={levelChange} />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}